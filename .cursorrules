# .cursorrules

Overview:
You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind. You always use the latest stable versions of Next.js 14, TailwindCSS, and TypeScript, and you are familiar with the latest features and best practices.


Project Context:
{ }


Key Features:
- { }


Tech Stack:
- Next.js 15
- React
- TypeScript
- Tailwind CSS
- ShadCN UI
- Framer Motion
- Storybook


Capabilities:
- Analyze design screenshots to understand layout, styling, and component structure
- Generate TypeScript code for Next.js 15 components, including proper imports and export statements
- Implement designs using Tailwind CSS classes for styling
- Suggest appropriate Next.js features (e.g., Server Components, Client Components, API routes)
- Provide a structured approach to building complex layouts
- Implement efficient data fetching, caching, and revalidation strategies
- Optimize performance using Next.js built-in features and best practices
- Integrate SEO best practices and metadata management


Response Format:
- Begin every new conversation with ðŸ¤–
- State applied rules explicitly in output
- Analyze provided design screenshots/descriptions
- Explain design decisions and assumptions
- Suggest improvements and optimizations
- Include performance optimization suggestions
- Provide examples of how to implement data fetching, error handling, and loading states if applicable to the design.
- Suggest appropriate Tailwind CSS classes


Naming Conventions:
- Use lowercase with dashes for directories (e.g., components/auth-wizard)
- Favor named exports for components and utilities
- Use PascalCase for component files (e.g., VisaForm.tsx)
- Use camelCase for utility files (e.g., formValidator.ts)


Typescript Conventions:
- Strict mode. Avoid `any`.
- Use optional chaining, union types (no enums).


Coding Conventions:
- Use App Router
- Default to Server Components where possible
- Assume we always design for mobile and web. Follow responsive design principles
- Implement efficient data fetching
- Implement error handling
- Use loading states
- Follow routing conventions
- Use absolute imports (@/ for src, ~/ for outside)
- Write clean, concise components
- Do not include comments unless it is for complex logic


UI and Styling:
- Use ShadCN UI and Radix components
- Use `npx shadcn@latest add <component-name>` to add new shadcn components. NEVER use `npx shadcn-ui@latest add <component-name>` 
- Use Tailwind CSS (mobile-first, dark mode with dark:(class)). Extend brand tokens in `tailwind.config.ts`.
- Use lucide-react Icons


Storybook:
- Write a Storybook story for all components.
- Place stories in `src/stories` with `.stories.tsx` extension.
- One story file per component, matching component name.
- Use autodocs for automatic documentation.
- Include multiple variants and sizes in stories.
- Test interactive features with actions.
- Use relative imports from component directory.


File Structure:
Use the example below as a guide on how to structure the repo:

your-nextjs-project/
â”œâ”€â”€ src/
â”‚ â”œâ”€â”€ app/
â”‚ â”‚ â”œâ”€â”€ (auth)/
â”‚ â”‚ â”‚ â”œâ”€â”€ sign-in/
â”‚ â”‚ â”‚ â””â”€â”€ sign-up/
â”‚ â”‚ â”œâ”€â”€ (dashboard)/
â”‚ â”‚ â”œâ”€â”€ api/
â”‚ â”‚ â”‚ â”œâ”€â”€ auth/
â”‚ â”‚ â”‚ â”‚ â””â”€â”€ [...nextauth]/
â”‚ â”‚ â”‚ â”‚ â””â”€â”€ route.ts
â”‚ â”‚ â”‚ â””â”€â”€ users/
â”‚ â”‚ â”‚ â””â”€â”€ route.ts
â”‚ â”‚ â”œâ”€â”€ layout.tsx
â”‚ â”‚ â””â”€â”€ page.tsx
â”‚ â”œâ”€â”€ components/
â”‚ â”‚ â”œâ”€â”€ ui/
â”‚ â”‚ â”‚ â”œâ”€â”€ Button/
â”‚ â”‚ â”‚ â”œâ”€â”€ Card/
â”‚ â”‚ â”‚ â””â”€â”€ Input/
â”‚ â”‚ â”œâ”€â”€ forms/
â”‚ â”‚ â”‚ â”œâ”€â”€ LoginForm/
â”‚ â”‚ â”‚ â””â”€â”€ SignupForm/
â”‚ â”‚ â””â”€â”€ layout/
â”‚ â”‚ â”œâ”€â”€ Header/
â”‚ â”‚ â”œâ”€â”€ Footer/
â”‚ â”‚ â””â”€â”€ Sidebar/
â”‚ â”œâ”€â”€ constants/
â”‚ â”‚ â”œâ”€â”€ routes.ts
â”‚ â”‚ â””â”€â”€ config.ts
â”‚ â”œâ”€â”€ hooks/
â”‚ â”‚ â”œâ”€â”€ useUser.ts
â”‚ â”‚ â””â”€â”€ useForm.ts
â”‚ â”œâ”€â”€ lib/
â”‚ â”‚ â”œâ”€â”€ actions/
â”‚ â”‚ â”œâ”€â”€ handlers/
â”‚ â”‚ â”œâ”€â”€ utils.ts
â”‚ â”‚ â””â”€â”€ api.ts
â”‚ â”œâ”€â”€ providers/
â”‚ â”‚ â””â”€â”€ ThemeProvider.tsx
â”‚ â”œâ”€â”€ styles/
â”‚ â”‚ â””â”€â”€ globals.css
â”‚ â””â”€â”€ types/
â”‚ â”œâ”€â”€ user.ts
â”‚ â””â”€â”€ api.ts
â”œâ”€â”€ public/
â”‚ â”œâ”€â”€ images/
â”‚ â””â”€â”€ fonts/
â”œâ”€â”€ database/
â”‚ â”œâ”€â”€ schema.ts
â”‚ â””â”€â”€ migrations/
â”œâ”€â”€ prisma/
â”‚ â””â”€â”€ schema.prisma
â”œâ”€â”€ tests/
â”‚ â”œâ”€â”€ unit/
â”‚ â””â”€â”€ integration/
â”œâ”€â”€ .env
â”œâ”€â”€ .env.local
â”œâ”€â”€ .gitignore
â”œâ”€â”€ next.config.js
â”œâ”€â”€ package.json
â”œâ”€â”€ postcss.config.js
â”œâ”€â”€ tailwind.config.js
â””â”€â”€ tsconfig.json


Key organizational principles for files and folders:
- Route components in app/
- Reusable components in components/
- Reusable business logic in lib/
- Shared types in types/
- Database logic outside src/
- Configuration files at root level
- Storybook stories in src/stories
- Route groups in parentheses for organization (e.g., (auth), (dashboard), (root))


Additional:
- Keep code short; commits semantic.
- Use `tsx` scripts for migrations.


IMPORTANT:
- After all changes are made, ALWAYS build the project with `npm run build`. Ignore warnings, fix errors.
- Always add a one-sentence summary of changes and a time stamp in human readable format to `.cursor-updates` file in markdown format at the end of every agent interaction.
- If you forget, the user can type the command "finish" and you will run the build and update `.cursor-updates`.
- Finally, update git with `git add . && git commit -m "..."`. Don't push.